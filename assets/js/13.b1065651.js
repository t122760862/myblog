(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{279:function(t,v,s){"use strict";s.r(v);var r=s(13),_=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("进程（process）和线程（thread）是操作系统的基本概念。")]),t._v(" "),v("p",[v("strong",[t._v("进程是 CPU 资源分配的最小单位（是能拥有资源和独立运行的最小单位）。")])]),t._v(" "),v("p",[v("strong",[t._v("线程是 CPU 调度的最小单位（是建立在进程基础上的一次程序运行单位）。")])]),t._v(" "),v("p",[t._v("由于每个进程至少要做一件事, 所以一个进程至少有一个线程。系统会给每个进程分配独立的内存,因此进程有它独立的资源。同一进程内的各个线程之间共享该进程的内存空间（包括代码段,数据集,堆等）。")]),t._v(" "),v("p",[t._v("借用一个生动的比喻来说,进程就像是一个有边界的生产厂间,而线程就像是厂间内的一个个员工,可以自己做自己的事情,也可以相互配合做同一件事情。")]),t._v(" "),v("p",[t._v("当我们启动一个应用,计算机会创建一个进程,操作系统会为进程分配一部分内存,应用的所有状态都会保存在这块内存中。")]),t._v(" "),v("p",[t._v("应用也许还会创建多个线程来辅助工作,这些线程可以共享这部分内存中的数据。如果应用关闭,进程会被终结,操作系统会释放相关内存。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/t122760862/blogimg@main/%E8%BF%9B%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%8E%82%E5%9B%BE.png",alt:""}})]),t._v(" "),v("h2",{attrs:{id:"浏览器主要进程和职责"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器主要进程和职责"}},[t._v("#")]),t._v(" 浏览器主要进程和职责")]),t._v(" "),v("p",[t._v("以 Chrome 为例,它由多个进程组成,每个进程都有自己核心的职责,它们相互配合完成浏览器的整体功能,每个进程中又包含多个线程,一个进程内的多个线程也会协同工作,配合完成所在进程的职责。"),v("br"),t._v("\nChrome 采用多进程架构,其顶层存在一个 Browser process 用以协调浏览器的其它进程。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/t122760862/blogimg@main/chrome.png",alt:""}})]),t._v(" "),v("p",[t._v("这么做的优点是单个 tab 或者插件 的崩溃不会影响到整个浏览器, 充分利用现代浏览器多核的优势。\n缺点是更大的内存开销")]),t._v(" "),v("p",[t._v("浏览器进程图示:"),v("br"),t._v(" "),v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/t122760862/blogimg@main/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B%E4%BB%8B%E7%BB%8D.png",alt:""}})]),t._v(" "),v("ol",[v("li",[t._v("主进程 Browser Process: 负责浏览器界面的显示与交互。各个页面的管理,创建和销毁其他进程。网络的资源管理、下载等。")]),t._v(" "),v("li",[t._v("第三方插件进程 Plugin Process: 每种类型的插件对应一个进程,仅当使用该插件时才创建。")]),t._v(" "),v("li",[t._v("GPU 进程 GPU Process: 最多只有一个,用于 3D 绘制等")]),t._v(" "),v("li",[t._v("渲染进程 Renderer Process: 称为浏览器渲染进程或浏览器内核,内部是多线程的。主要负责页面渲染,脚本执行,事件处理等。")]),t._v(" "),v("li",[t._v("网络进程: 主要负责页面的网络资源加载。")])]),t._v(" "),v("h3",{attrs:{id:"渲染进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程"}},[t._v("#")]),t._v(" 渲染进程")]),t._v(" "),v("p",[t._v("浏览器的渲染进程是多线程的, 主要包括:"),v("br"),t._v(" "),v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/t122760862/blogimg@main/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BA%BF%E7%A8%8B.png",alt:""}})]),t._v(" "),v("h4",{attrs:{id:"gui-渲染线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#gui-渲染线程"}},[t._v("#")]),t._v(" GUI 渲染线程")]),t._v(" "),v("ul",[v("li",[t._v("负责渲染浏览器界面,解析 HTML,CSS,构建 DOM 树和 RenderObject 树,布局和绘制等。")]),t._v(" "),v("li",[t._v("当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时,该线程就会执行。")]),t._v(" "),v("li",[t._v("注意,GUI 渲染线程与 JS 引擎线程是互斥的,当 JS 引擎执行时 GUI 线程会被挂起（相当于被冻结了）,GUI 更新会被保存在一个队列中等到 JS 引擎空闲时立即被执行。")])]),t._v(" "),v("h4",{attrs:{id:"js-引擎线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js-引擎线程"}},[t._v("#")]),t._v(" JS 引擎线程")]),t._v(" "),v("ul",[v("li",[t._v("Javascript 引擎,也称为 JS 内核,负责处理 Javascript 脚本程序。（例如 V8 引擎）")]),t._v(" "),v("li",[t._v("JS 引擎线程负责解析 Javascript 脚本,运行代码。")]),t._v(" "),v("li",[t._v("JS 引擎一直等待着任务队列中任务的到来,然后加以处理,一个 Tab 页（renderer 进程）中无论什么时候都只有一个 JS 线程在运行 JS 程序。")]),t._v(" "),v("li",[v("strong",[t._v("GUI 渲染线程与 JS 引擎线程是互斥的")]),t._v(",所以如果 JS 执行的时间过长,这样就会造成页面的渲染不连贯,导致页面渲染加载阻塞。")])]),t._v(" "),v("h4",{attrs:{id:"事件触发线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件触发线程"}},[t._v("#")]),t._v(" 事件触发线程")]),t._v(" "),v("ul",[v("li",[t._v("归属于浏览器而不是 JS 引擎,用来控制事件循环（可以理解,JS 引擎自己都忙不过来,需要浏览器另开线程协助）")]),t._v(" "),v("li",[t._v("当 JS 引擎执行代码块如 setTimeOut 时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等）,会将对应任务添加到事件线程中")]),t._v(" "),v("li",[t._v("当对应的事件符合触发条件被触发时,该线程会把事件添加到待处理队列的队尾,等待 JS 引擎的处理")]),t._v(" "),v("li",[v("strong",[t._v("由于 JS 的单线程关系")]),t._v(",所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）")])]),t._v(" "),v("h4",{attrs:{id:"定时触发器线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定时触发器线程"}},[t._v("#")]),t._v(" 定时触发器线程")]),t._v(" "),v("ul",[v("li",[t._v("传说中的 setInterval 与 setTimeout 所在线程")]),t._v(" "),v("li",[t._v("浏览器定时计数器并不是由 JavaScript 引擎计数的,（因为 JavaScript 引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）, 通过单独线程来计时并触发定时（计时完毕后,添加到事件队列中,等待 JS 引擎空闲后执行）")]),t._v(" "),v("li",[t._v("W3C 在 HTML 标准中规定,规定要求 setTimeout 中低于 4ms 的时间间隔算为 4ms。")])]),t._v(" "),v("h4",{attrs:{id:"异步-http-请求线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异步-http-请求线程"}},[t._v("#")]),t._v(" 异步 http 请求线程")]),t._v(" "),v("ul",[v("li",[t._v("在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求")]),t._v(" "),v("li",[t._v("将检测到状态变更时,如果设置有回调函数,异步线程就产生状态变更事件,将这个回调再放入事件队列中。再由 JavaScript 引擎执行")])])])}),[],!1,null,null,null);v.default=_.exports}}]);