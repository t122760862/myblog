(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{295:function(e,t,s){"use strict";s.r(t);var a=s(13),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"灵魂三问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#灵魂三问"}},[e._v("#")]),e._v(" 灵魂三问")]),e._v(" "),t("p",[e._v("带着问题看源码：")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("computed")]),e._v(" 是如何实现缓存的？")]),e._v(" "),t("li",[t("code",[e._v("computed")]),e._v(" 是如何收集依赖数据的？")]),e._v(" "),t("li",[t("code",[e._v("computed")]),e._v("依赖数据更新之后是如何更新视图的？")])]),e._v(" "),t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),t("p",[e._v("相信"),t("code",[e._v("computed")]),e._v("都用过.那么,知其然知其所以然?")]),e._v(" "),t("h3",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[e._v("#")]),e._v(" 定义")]),e._v(" "),t("p",[t("code",[e._v("computed")]),e._v(" 是 "),t("code",[e._v("vue")]),e._v(" 中的计算属性, 根据依赖关系进行计算并缓存, 只有当依赖被改变的时候才会更新")]),e._v(" "),t("p",[t("code",[e._v("computed")]),e._v(" 一般用于一些复杂的场景, 如受多个数据共同影响的场景")]),e._v(" "),t("h3",{attrs:{id:"用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[e._v("#")]),e._v(" 用法")]),e._v(" "),t("p",[t("code",[e._v("computed")]),e._v(" 有两种用法")]),e._v(" "),t("p",[e._v("一种是常规的函数写法, 默认使用 "),t("code",[e._v("getter")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("computed: {\n\n  getName() {\n\n    return `${this.firstName}-${this.lastName}`\n\n  }\n\n}\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("其实还可以使用对象的写法, 设置 "),t("code",[e._v("computed")]),e._v(" 的 "),t("code",[e._v("getter")]),e._v(", 当值被修改的时候同时修改依赖的属性")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('computed: {\n\n  getName: {\n\n    get() {\n\n    return `${this.firstName}-${this.lastName}`;\n\n    },\n\n    set(val) {\n\n        const [first, last] = val.split("-");\n    \n        this.firstName = first;\n    \n        this.lastName = last;\n\n    },\n\n  },\n\n},\n\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br")])]),t("p",[e._v("下面跟着源码直接进入正题")]),e._v(" "),t("h2",{attrs:{id:"初始化过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化过程"}},[e._v("#")]),e._v(" 初始化过程")]),e._v(" "),t("p",[t("code",[e._v("new Vue(computed)")]),e._v(" => "),t("code",[e._v("initState")]),e._v(" => "),t("code",[e._v("initComputed")]),e._v(" => "),t("code",[e._v("defineComputed[key]")]),e._v(" => "),t("code",[e._v("createComputedGetter")]),e._v(" =>"),t("code",[e._v("mountComponent")])]),e._v(" "),t("p",[e._v("大致介绍一下整个流程:")]),e._v(" "),t("ol",[t("li",[e._v("首先在 "),t("code",[e._v("initState")]),e._v(" 中对传入的 "),t("code",[e._v("computed")]),e._v(" 进行初始化")]),e._v(" "),t("li",[e._v("初始化的过程中, 为每一个声明的 "),t("code",[e._v("computed")]),e._v("创建 "),t("code",[e._v("Watcher")]),e._v(", 将声明时传入的函数(或者对象声明的 "),t("code",[e._v("get")]),e._v(") 传递给创建的"),t("code",[e._v("Watcher")]),e._v("用于被访问时执行,利用 "),t("code",[e._v("defineProperty")]),e._v(" 将声明的 "),t("code",[e._v("computed")]),e._v(" 代理到 "),t("code",[e._v("vm")]),e._v(" 实例上, 从而跟 "),t("code",[e._v("data")]),e._v(" 一样可以通过 "),t("code",[e._v("this")]),e._v(" 来访问, "),t("strong",[e._v("同时用一个函数包装"),t("code",[e._v("computed")]),e._v("的"),t("code",[e._v("getter")]),e._v("(实现缓存的关键)")]),e._v(" , 当"),t("code",[e._v("computed")]),e._v("被访问时将执行该函数, 判断是否使用缓存值")]),e._v(" "),t("li",[e._v("初始化结束之后会执行 "),t("code",[e._v("vm.$mount")]),e._v(", 对视图进行渲染, 渲染过程中会执行 "),t("code",[e._v("vm._render")]),e._v(" 生成 "),t("code",[e._v("vnode")]),e._v(" 由于解析到 "),t("code",[e._v(e._s(e.computed))]),e._v(" 会触发之前劫持的 "),t("code",[e._v("getter")]),e._v(", 从而执行声明"),t("code",[e._v("computed")]),e._v("时的函数")]),e._v(" "),t("li",[e._v("执行声明时传入的函数时, 由于初始化"),t("code",[e._v("dirty=true")]),e._v(", 因此会去获取最新值, 此时会触发其所引用的"),t("code",[e._v("data")]),e._v("中数据的"),t("code",[e._v("getter")]),e._v(", 从而触发响应式系统的依赖收集."),t("strong",[e._v("由于此时的 "),t("code",[e._v("Dep.target")]),e._v("为该"),t("code",[e._v("computerWatcher")])]),e._v(", 因此会收集该"),t("code",[e._v("computerWatcher")]),e._v("为依赖项")]),e._v(" "),t("li",[e._v("当"),t("code",[e._v("computed")]),e._v("依赖的数据被更新时, 会进行消息分发,执行"),t("code",[e._v("watcher.update()")]),e._v(", 若"),t("code",[e._v("watcher")]),e._v("为"),t("code",[e._v("computedWatcher")]),e._v("则将"),t("code",[e._v("dirty")]),e._v("标记为"),t("code",[e._v("true")]),e._v(", 当前订阅的"),t("code",[e._v("computed")]),e._v("被访问时, 触发之前被函数包装的"),t("code",[e._v("getter")]),e._v(", 函数内部识别到"),t("code",[e._v("dirty===true")]),e._v("则获取最新值, 获取完之后接着将"),t("code",[e._v("dirty")]),e._v("置位"),t("code",[e._v("false")]),e._v(". "),t("strong",[e._v("由于被依赖的数据订阅者中还有用于视图更新的"),t("code",[e._v("renderWatcher")]),e._v(", 因此会接着对视图更新从而渲染最新数据, 这也说明 "),t("code",[e._v("computedWatcher")]),e._v(" 要在 "),t("code",[e._v("renderWatcher")]),e._v("之前去更新")])])]),e._v(" "),t("p",[e._v("主要代码如下:")]),e._v(" "),t("h3",{attrs:{id:"initcomputed-创建-computedwatcher"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#initcomputed-创建-computedwatcher"}},[e._v("#")]),e._v(" initComputed => 创建 computedWatcher")]),e._v(" "),t("ol",[t("li",[e._v("在"),t("code",[e._v("Vue")]),e._v("实例上挂载"),t("code",[e._v("_computedWatchers")]),e._v("属性用来存放所有"),t("code",[e._v("computedWatcher")])]),e._v(" "),t("li",[e._v("为每一个计算属性创建"),t("code",[e._v("computedWatcher")])]),e._v(" "),t("li",[e._v("使用"),t("code",[e._v("defineComputed")]),e._v("处理定义的每个"),t("code",[e._v("computed")])])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// src/core/instance/state.js  \nfunction initComputed(vm: Component, computed: Object) {\n  /** 在vm实例上挂载 _computedWatchers 属性存放 computerwatcher */\n  const watchers = vm._computedWatchers = Object.create(null)\n  /** 判断是否服务端 */\n  const isSSR = isServerRendering()\n\n  for (const key in computed) {\n    const userDef = computed[key]\n    /**\n     * 1. 判断 computed 属于默认函数写法,还是对象写法  \n     * 2. 如果是对象写法则将定义的 get 赋值给 getter\n     */\n    const getter = typeof userDef === 'function' ? userDef : userDef.get\n\n    if (!isSSR) {\n      /** 可以看出本质上 computed 就是一个 watchers 数组, 每一个定义的 computed 都是一个 watcher(computedWatcher) */\n      watchers[key] = new Watcher(\n        vm,\n        /** 将之前申明的 getter 传入 watcher 的 expOrFn, 当 dep.notify 的时候将会执行 */\n        getter || noop,\n        noop,\n        /** computed 实现缓存关键, 值为上面定义的 { lazy: true } */\n        computedWatcherOptions\n      )\n    }\n\n    /** 判断是否有重复的申明 */\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef)\n    } else if (process.env.NODE_ENV !== 'production') {\n      // ...\n    }\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br")])]),t("h3",{attrs:{id:"definecomputed-劫持-getter-实现缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#definecomputed-劫持-getter-实现缓存"}},[e._v("#")]),e._v(" defineComputed => 劫持 getter, 实现缓存")]),e._v(" "),t("ol",[t("li",[e._v("使用"),t("code",[e._v("Object.defineProperty")]),e._v("将计算属性挂载到 "),t("code",[e._v("vue")]),e._v(" 实例上, 使其可以通过 "),t("code",[e._v("this")]),e._v(" 访问")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("createComputedGetter")]),e._v(" 包装计算属性的"),t("code",[e._v("getter")]),e._v("函数, 当计算属性被访问的时候执行.通过"),t("code",[e._v("dirty")]),e._v("变量标记是否去获取最新数据")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// src/core/instance/state.js\nexport function defineComputed(\n  target: any,\n  key: string,\n  userDef: Object | Function\n) {\n  /** 判断 computed 属于函数式写法还是对象写法, 目的是拿到其执行函数 */\n  if (typeof userDef === "function") {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    // ...\n    }\n  /** 挂载到 vue 实例, 通过 this 可以访问 */\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter(key) {\n  return function computedGetter() {\n    const watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      /** 如果"脏了", 表示依赖数据被更新, 则需要获取最新数据 */\n      if (watcher.dirty) {\n        /** \n         * 1. 本质是调用创建 computedWatcher 时, 传入的方法即定义 computed 时写的方法, 从而更新 Watcher 的 value 为最新值 \n         * 2. 获取数据之后, 同时将 dirty 置位 false, 进行缓存\n         * */\n        watcher.evaluate();\n      }\n\n      /** 如果有依赖正在收集, 则将该 watcher 下所有发布者添加到正在收集依赖的 watcer 发布者列表里 */\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    }\n  };\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br"),t("span",{staticClass:"line-number"},[e._v("39")]),t("br"),t("span",{staticClass:"line-number"},[e._v("40")]),t("br")])]),t("p",[e._v("这里注意一下有这样一步"),t("code",[e._v("watcher.depend()")]),e._v(", 目的是将该 "),t("code",[e._v("computedWatcher")]),e._v("的发布者添加到当前正在收集依赖的"),t("code",[e._v("Watcher")]),e._v(".")]),e._v(" "),t("p",[e._v("首先初次渲染页面时, 由"),t("code",[e._v("renderWatcher")]),e._v("进行依赖收集, 当解析模板发现"),t("code",[e._v(e._s(e.computed))]),e._v("时, 触发计算属性的 "),t("code",[e._v("getter")]),e._v(", 执行 "),t("code",[e._v("watcher.get")]),e._v(",此时会将当前"),t("code",[e._v("watcher")]),e._v("压入"),t("code",[e._v("targetStack")]),e._v("依赖收集栈, 同时执行"),t("code",[e._v("Dep.target = target")]),e._v(".即将此时进行依赖收集的"),t("code",[e._v("renderWatcher")]),e._v("修改为当前"),t("code",[e._v("computedWathcer")]),e._v(". 执行计算属性定义函数时,访问到依赖数据,触发响应式系统将"),t("code",[e._v("Dep.target")]),e._v("加入订阅者"),t("code",[e._v("subs")]),e._v("列表中.依赖收集完毕,执行"),t("code",[e._v("popTarget()")]),e._v("弹出收集栈,此时"),t("code",[e._v("Dep.target")]),e._v("修改为之前的"),t("code",[e._v("renderWatcher")])]),e._v(" "),t("p",[e._v("因此"),t("code",[e._v("watcher.depend()")]),e._v("的最终目的就是将"),t("code",[e._v("computedWatcher")]),e._v("的发布者添加到"),t("code",[e._v("renderWatcher")]),e._v("的发布者列表中, 如果不执行这一步, 计算属性所依赖的属性修改之后,不会触发视图更新, 因为有可能"),t("code",[e._v("template")]),e._v("中只引用了计算属性而没有引用计算属性内部依赖的数据, "),t("code",[e._v("renderWatcher")]),e._v("并没有对依赖数据进行订阅.")]),e._v(" "),t("h3",{attrs:{id:"数据更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据更新"}},[e._v("#")]),e._v(" 数据更新")]),e._v(" "),t("p",[e._v("当计算属性依赖数据被更新时, 会触发响应式数据的"),t("code",[e._v("setter")]),e._v(", 执行"),t("code",[e._v("dep.notify")]),e._v("对所有订阅者进行订阅发布")]),e._v(" "),t("p",[e._v("当订阅者为"),t("code",[e._v("computedWatcher")]),e._v("时, 将内部的"),t("code",[e._v("dirty")]),e._v("置为"),t("code",[e._v("true")])]),e._v(" "),t("p",[e._v("当订阅者为"),t("code",[e._v("renderWatcher")]),e._v("时, 执行"),t("code",[e._v("vm._update(vm._render)")]),e._v("更新视图.扫描数据的同时, 访问到计算属性, 则会执行之前"),t("code",[e._v("createComputedGetter")]),e._v("包装的"),t("code",[e._v("getter")]),e._v("函数, 由于当前"),t("code",[e._v("computedWatcher")]),e._v("内部的"),t("code",[e._v("dirty")]),e._v("已经在上一步被标记为"),t("code",[e._v("true")]),e._v(", 因此会刷新"),t("code",[e._v("watcher.value")]),e._v(", 刷新之后将"),t("code",[e._v("dirty")]),e._v("置为"),t("code",[e._v("false")]),e._v(". 若"),t("code",[e._v("dirty")]),e._v("为"),t("code",[e._v("false")]),e._v(", 则直接获取"),t("code",[e._v("watcher.value")])]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// src/core/observer/watcher.js")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("update")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* 如果this.lazy为true, 说明是 computedWatcher, 通过dirty标记为有更新, 当下一次 computed 被访问的时候, 识别到该字段则会进行数据更新 */")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("lazy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("dirty "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("queueWatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("回顾一下之前的问题:")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("computed")]),e._v(" 是如何实现缓存的？")])]),e._v(" "),t("p",[e._v("答: 通过"),t("code",[e._v("createComputedGetter")]),e._v("包装计算属性的"),t("code",[e._v("getter")]),e._v(",使用"),t("code",[e._v("dirty")]),e._v("标记所依赖的数据有没有更新, 若更新则刷新数据,否则直接返回"),t("code",[e._v("watcher.value")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("code",[e._v("computed")]),e._v(" 是如何收集依赖数据的？")])]),e._v(" "),t("p",[e._v("答: "),t("code",[e._v("computed")]),e._v("本质上就是一个"),t("code",[e._v("watcher")]),e._v(", 在执行"),t("code",[e._v("watcher.get")]),e._v("时会访问到计算属性所依赖的数据,触发依赖收集系统. 此时的订阅者"),t("code",[e._v("Dep.target")]),e._v("为该"),t("code",[e._v("coomputedWatcher")]),e._v(", 订阅方为所有依赖数据.")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("code",[e._v("computed")]),e._v("依赖数据更新之后是如何更新视图的？")])]),e._v(" "),t("p",[e._v("答: 当"),t("code",[e._v("computed")]),e._v("内部依赖数据进行依赖收集的之后, 会将当前"),t("code",[e._v("renderWatcher")]),e._v("也加入到订阅队列中, 即依赖数据更新后先触发"),t("code",[e._v("computedWatcher.update")]),e._v("的, 然后触发"),t("code",[e._v("renderWatcher.update")]),e._v("更新视图")])])}),[],!1,null,null,null);t.default=n.exports}}]);