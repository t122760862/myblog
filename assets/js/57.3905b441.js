(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{323:function(s,a,t){"use strict";t.r(a);var e=t(13),v=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("最近遇到一个正则匹配导致页面卡死的问题")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("text"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' 功能                                                                                 使用软件编码时，性能消耗略大于分层视频编码'")]),s._v("  \nreg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/ {0,}#{0,} {0,}(\\n)?\\s{0,}$/gm'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v('经过研究发现原因是所谓的正则“回溯陷阱（Catastrophic Backtracking）"，本文主要记录一下这个问题.')]),s._v(" "),a("h3",{attrs:{id:"正则表达式引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式引擎"}},[s._v("#")]),s._v(" 正则表达式引擎")]),s._v(" "),a("p",[s._v("正则引擎一般分为两种: "),a("strong",[s._v("DFA 自动机")]),s._v("（Deterministic Final Automata 确定型有穷自动机）和 "),a("strong",[s._v("NFA 自动机")]),s._v("（Non deterministic Finite Automaton 不确定型有穷自动机）")]),s._v(" "),a("p",[s._v("以一段文本为例:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("text ＝ ‘after tonight’ regex ＝ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("‘to")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nite"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("nighta"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("night"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("’ \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"dfa自动机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dfa自动机"}},[s._v("#")]),s._v(" DFA自动机")]),s._v(" "),a("p",[s._v("在DFA匹配时候，采用的是用文本来匹配正则表达式的方式，从"),a("code",[s._v("a")]),s._v("开始匹配"),a("code",[s._v("t")]),s._v("，直到第一个"),a("code",[s._v("t")]),s._v("跟正则的t匹配，但"),a("code",[s._v("e")]),s._v("跟"),a("code",[s._v("o")]),s._v("匹配失败，继续，直到文本里面的第二个 "),a("code",[s._v("t")]),s._v("匹配正则的"),a("code",[s._v("t")]),s._v("，接着"),a("code",[s._v("o")]),s._v("与"),a("code",[s._v("o")]),s._v("匹配，"),a("code",[s._v("n")]),s._v("的时候发现正则里面有三个可选匹配，开始并行匹配，直到文本中的g使得第一个可选条件不匹配，继续，直到最后匹配。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("根据文本匹配正则表达式")])]),s._v(" "),a("li",[s._v("速度快，支持的特性少")]),s._v(" "),a("li",[s._v("不支持捕获组，引用等")])]),s._v(" "),a("h4",{attrs:{id:"nfa自动机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nfa自动机"}},[s._v("#")]),s._v(" NFA自动机")]),s._v(" "),a("p",[s._v("在NFA匹配时候，是根据正则表达式来匹配文本的，从"),a("code",[s._v("t")]),s._v("开始匹配"),a("code",[s._v("a")]),s._v("，失败，继续，直到文本里面的第一个"),a("code",[s._v("t")]),s._v("，接着比较"),a("code",[s._v("o")]),s._v("和"),a("code",[s._v("e")]),s._v("，失败，正则回退到"),a("code",[s._v("t")]),s._v("，继续，直到文本里面的第二个"),a("code",[s._v("t")]),s._v("，然后 "),a("code",[s._v("o")]),s._v("和文本里面的"),a("code",[s._v("o")]),s._v("也匹配，继续，正则表达式后面有三个可选条件，依次匹配，第一个失败，接着二、三，直到匹配。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("根据正则表达式匹配文本")])]),s._v(" "),a("li",[s._v("不断读入字符，尝试是否匹配当前正则，不匹配则吐出字符重新尝试，因此速度比较慢")]),s._v(" "),a("li",[s._v("支持更多特性")])]),s._v(" "),a("p",[s._v("对于DFA而言，文本的匹配过程是一致的，都是对文本的字符依次从左到右进行匹配，所以，DFA在匹配过程中是跟正则表达式无关的，而 NFA 对于不同但效果相同的正则表达式，匹配过程是完全不同的。")]),s._v(" "),a("p",[s._v("NFA支持更多的特性，因而绝大多数编程场景下（包括java，js），我们面对的是NFA。")]),s._v(" "),a("h3",{attrs:{id:"nfa自动机的回溯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nfa自动机的回溯"}},[s._v("#")]),s._v(" NFA自动机的回溯")]),s._v(" "),a("p",[s._v("以一个例子来讲解:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abbc'")]),s._v("\nreg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ab{1，3}bc'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",[a("li",[s._v("取出正则中的第一个匹配符"),a("code",[s._v("a")]),s._v("去跟字符串的第一个字符开始匹配，命中"),a("code",[s._v("a")])]),s._v(" "),a("li",[s._v("取出正则中第二个匹配符"),a("code",[s._v("b{1，}")]),s._v("，由于贪婪模式会尽可能多的去匹配"),a("code",[s._v("b")]),s._v("，命中 "),a("code",[s._v("bb")])]),s._v(" "),a("li",[s._v("此时匹配符是第三个"),a("code",[s._v("b")]),s._v("，同时字符串为第四个字符"),a("code",[s._v("c")]),s._v("，没有命中，此时就会发生回溯")]),s._v(" "),a("li",[s._v("吐出已经读取的第四个字符"),a("code",[s._v("c")]),s._v("，取出正则匹配的下一个匹配符"),a("code",[s._v("b")]),s._v("，没有命中，继续回溯")]),s._v(" "),a("li",[s._v("吐出已经读取的第三个字符"),a("code",[s._v("b")]),s._v("，拿已经读取的匹配符"),a("code",[s._v("b")]),s._v("去匹配，命中 "),a("code",[s._v("b")])]),s._v(" "),a("li",[s._v("取出正则匹配中的最后一个匹配符"),a("code",[s._v("c")]),s._v("去跟字符串中的下一个字符"),a("code",[s._v("c")]),s._v("匹配，命中")]),s._v(" "),a("li",[s._v("字符串读取完毕，结束")])]),s._v(" "),a("p",[s._v("简单理解贪婪模式会竟可能多的去匹配，若没有命中，会吐出已经读取的字符进行回溯，若还是没有命中会继续回溯")]),s._v(" "),a("p",[s._v("在看一个例子:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abbbc'")]),s._v("\nreg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ab{1，3}bbc'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/t122760862/blogimg@main/ng.png",alt:""}})]),s._v(" "),a("p",[s._v("其中第7步和第10步是回溯。第7步与第4步一样，此时"),a("code",[s._v("b{1,3}")]),s._v("匹配了两个"),a("code",[s._v('"b"')]),s._v("，而第10步与第3步一样，此时"),a("code",[s._v("b{1,3}")]),s._v("只匹配了一个"),a("code",[s._v('"b"')]),s._v("，这也是"),a("code",[s._v("b{1,3}")]),s._v("的最终匹配结果。")]),s._v(" "),a("p",[s._v("回头在看卡死的案例:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v(" {0,}#{0,} {0,}(\\n)?\\s{0,}$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("gm")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("卡死的字符串:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("text"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' 功能                                                                                 使用软件编码时，性能消耗略大于分层视频编码'")]),s._v("  \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("该正则的功能为匹配markdown中的标题#")]),s._v(" "),a("p",[s._v("当匹配到空格之后，后面没有能匹配的内容，因此会进行回溯再次去匹配，由于有几个地方发生了回溯，导致了"),a("strong",[s._v("回溯陷阱（Catastrophic Backtracking）")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://regex101.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("regex101"),a("OutboundLink")],1),s._v("可以查看具体的步骤:")]),s._v(" "),a("p",[s._v("可以查看发生了十万次匹配，因此可以断定发生了灾难性回溯:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/t122760862/blogimg@main/reg101%E7%81%BE%E9%9A%BE%E6%80%A7%E5%9B%9E%E6%BA%AF.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"常见的回溯形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的回溯形式"}},[s._v("#")]),s._v(" 常见的回溯形式")]),s._v(" "),a("p",[s._v("简单理解就是因为有很多种可能，所以要一个一个试直到某一步整体匹配成功，或者所有可能都尝试完，发现不匹配.")]),s._v(" "),a("blockquote",[a("ol",[a("li",[a("p",[s._v("贪婪量词“试”的策略是：买衣服砍价。价钱太高了，便宜点，不行，再便宜点。")])]),s._v(" "),a("li",[a("p",[s._v("惰性量词“试”的策略是：卖东西加价。给少了，再多给点行不，还有点少啊，再给点。")])]),s._v(" "),a("li",[a("p",[s._v("分支结构“试”的策略是：货比三家。这家不行，换一家吧，还不行，再换。")])])])]),s._v(" "),a("h3",{attrs:{id:"贪婪量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪婪量词"}},[s._v("#")]),s._v(" 贪婪量词")]),s._v(" "),a("p",[s._v("贪婪量词比如"),a("code",[s._v("b{1,3}")]),s._v("，因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝试。首先会尝试"),a("code",[s._v('"bbb"')]),s._v("，然后再看整个正则是否能匹配。不能匹配时，吐出一个"),a("code",[s._v('"b"')]),s._v("，即在"),a("code",[s._v('"bb"')]),s._v("的基础上，再继续尝试。如果还不行，再吐出一个，再试。如果还不行呢？只能说明匹配失败了。")]),s._v(" "),a("h4",{attrs:{id:"惰性量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性量词"}},[s._v("#")]),s._v(" 惰性量词")]),s._v(" "),a("p",[s._v("惰性量词就是在贪婪量词后面加个问号，表示尽可能少的匹配")]),s._v(" "),a("p",[s._v("虽然惰性量词不贪，但也会有回溯的现象:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("text"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12345'")]),s._v("\nreg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/^\\d{1,3}?\\d{1,3}$/'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("匹配过程是:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/t122760862/blogimg@main/%E6%83%B0%E6%80%A7%E5%9B%9E%E6%BA%AF%E5%8C%B9%E9%85%8D%E8%BF%87%E7%A8%8B3.png",alt:""}})]),s._v(" "),a("p",[s._v("为了整体匹配成功，最后"),a("code",[s._v("\\d{1，3}?")]),s._v("匹配的字符是"),a("code",[s._v('"12"')]),s._v("，是两个数字，而不是一个")]),s._v(" "),a("h4",{attrs:{id:"分支结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支结构"}},[s._v("#")]),s._v(" 分支结构")]),s._v(" "),a("p",[s._v("分支也是惰性的，比如"),a("code",[s._v("/can|candy/")]),s._v("，去匹配字符串"),a("code",[s._v('"candy"')]),s._v("，得到的结果是"),a("code",[s._v('"can"')]),s._v("，因为分支会一个一个尝试，如果前面的满足了，后面就不会再试验了。")]),s._v(" "),a("h4",{attrs:{id:"独占模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#独占模式"}},[s._v("#")]),s._v(" 独占模式")]),s._v(" "),a("p",[s._v("下面的几个特殊字符相信大家都知道它们的用法：")]),s._v(" "),a("ol",[a("li",[s._v("?: 告诉引擎匹配前导字符0次或一次。事实上是表示前导字符是可选的。")]),s._v(" "),a("li",[s._v("+: 告诉引擎匹配前导字符1次或多次。")]),s._v(" "),a("li",[s._v("*: 告诉引擎匹配前导字符0次或多次。")]),s._v(" "),a("li",[s._v("{min, max}: 告诉引擎匹配前导字符min次到max次。min和max都是非负整数。如果有逗号而max被省略了，则表示max没有限制；如果逗号和max都被省略了，则表示重复min次。")])]),s._v(" "),a("p",[s._v("默认情况下，这个几个特殊字符都是贪婪的，也就是说，它会根据前导字符去匹配尽可能多的内容。")]),s._v(" "),a("p",[s._v("如果在以上四种表达式后加上一个加号"),a("code",[s._v("（+）")]),s._v("，则会开启独占模式。同贪婪模式一样，独占模式一样会匹配最长。不过在独占模式下，正则表达式尽可能长地去匹配字符串，一旦匹配不成功就会结束匹配而不会回溯。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("text"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abbc'")]),s._v("\nreg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ab{1，3}+bc'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("匹配过程:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/t122760862/blogimg@main/%E6%AD%A3%E5%88%99-%E7%8B%AC%E5%8D%A0%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E8%BF%87%E7%A8%8B.png",alt:""}})]),s._v(" "),a("p",[s._v("可以发现，在第2和第3步，"),a("code",[s._v("b{1,3}+")]),s._v("会将文本中的2个字母b都匹配上，结果文本中只剩下一个字母"),a("code",[s._v("c")]),s._v("。那么在第4步时，正则中的"),a("code",[s._v("b")]),s._v("和文本中的"),a("code",[s._v("c")]),s._v("进行匹配，当无法匹配时，并不进行回溯，这时候整个文本就无法和正则表达式发生匹配。如果将正则表达式中的加号"),a("code",[s._v("（+）")]),s._v("去掉，那么这个文本整体就是匹配的了。")])])}),[],!1,null,null,null);a.default=v.exports}}]);